/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dmrr.asistenciasx;

import bareMysqlTables.Carrera;
import bareMysqlTables.Curso;
import bareMysqlTables.Horario;
import bareMysqlTables.Materia;
import bareMysqlTables.Profesor;
import java.awt.Cursor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author diego
 */
public class SIIAUConnector extends javax.swing.JFrame {

    //TODO: remove the following two
    String codigo = "2225255";
    String nip = "";

    EntityManager em;
    String sessionId;
    String sessionId2;

    Map<String, String> departamentos;
    
    StartScreen papa;

    /**
     * Creates new form NewJFrame
     */
    public SIIAUConnector() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        departamentos = new HashMap<>();
        em = javax.persistence.Persistence.createEntityManagerFactory("asistenciasx?zeroDateTimeBehavior=convertToNullPU").createEntityManager();

    }
    
    public SIIAUConnector(StartScreen aThis){
        this();
        this.papa=aThis;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tlog = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButtonCarreras = new javax.swing.JButton();
        jButtonMaestros = new javax.swing.JButton();
        jButtonMaterias = new javax.swing.JButton();
        jButtonCursos = new javax.swing.JButton();
        jComboBoxDepartamento = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButtonSincronizaProfesor = new javax.swing.JButton();
        jTextFieldProfesorId = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPasswordFieldNIP = new javax.swing.JPasswordField();
        jButtonLoginSIIAU = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tlog.setColumns(20);
        tlog.setRows(5);
        jScrollPane1.setViewportView(tlog);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sincronizar"));

        jButtonCarreras.setText("Carreras");
        jButtonCarreras.setEnabled(false);
        jButtonCarreras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCarrerasActionPerformed(evt);
            }
        });

        jButtonMaestros.setText(" Maestros");
        jButtonMaestros.setEnabled(false);
        jButtonMaestros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMaestrosActionPerformed(evt);
            }
        });

        jButtonMaterias.setText("Materias");
        jButtonMaterias.setEnabled(false);
        jButtonMaterias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMateriasActionPerformed(evt);
            }
        });

        jButtonCursos.setText("Cursos");
        jButtonCursos.setEnabled(false);
        jButtonCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCursosActionPerformed(evt);
            }
        });

        jComboBoxDepartamento.setEnabled(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Manual"));

        jLabel3.setText("Sincroniza todos los cursos y materias del maestro en todos los departamentos");

        jButtonSincronizaProfesor.setText("Sincronizar Maestro");
        jButtonSincronizaProfesor.setEnabled(false);
        jButtonSincronizaProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSincronizaProfesorActionPerformed(evt);
            }
        });

        jTextFieldProfesorId.setText("2914077");
        jTextFieldProfesorId.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldProfesorId, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSincronizaProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldProfesorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSincronizaProfesor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCarreras)
                .addGap(18, 18, 18)
                .addComponent(jButtonMaestros)
                .addGap(12, 12, 12)
                .addComponent(jButtonMaterias)
                .addGap(18, 18, 18)
                .addComponent(jButtonCursos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBoxDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCarreras)
                    .addComponent(jButtonMaestros)
                    .addComponent(jButtonMaterias)
                    .addComponent(jButtonCursos)
                    .addComponent(jComboBoxDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de Acceso a SIIAU"));

        jLabel1.setText("Codigo");

        jTextFieldCodigo.setText("2225255");

        jLabel2.setText("NIP");

        jButtonLoginSIIAU.setText("Conectar");
        jButtonLoginSIIAU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginSIIAUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jPasswordFieldNIP))
                .addGap(13, 13, 13))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoginSIIAU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordFieldNIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLoginSIIAU)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCarrerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCarrerasActionPerformed
        tlog.append("Carreras obtenidas de SIIAU\n");
        Runnable hilo = new Runnable() {
            @Override
            public void run() {
                try {
                    Document html = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/sspsecc.lista_carreras?cup=J")
                            .userAgent("Mozilla")
                            .timeout(0)
                            .post();

                    int count = 0;

                    List listaCarreras = new ArrayList();

                    Carrera carrera = new Carrera();
                    carrera.setIdcarrera("");
                    carrera.setDescripcion("Sin Carrera Asignada");
                    listaCarreras.add(carrera);

                    Element firstTable = html.select("body > table").first();
                    Elements carreras = firstTable.select("tbody > tr");
                    for (Element carreraHR : carreras) {
                        count++;
                        if (count == 1) {
                            continue; //Jump first register bad formed html, not use of thead.
                        }
                        carrera = new Carrera();
                        carrera.setIdcarrera(carreraHR.select("td:eq(0)").first().text());
                        carrera.setDescripcion(carreraHR.select("td:eq(1)").first().text());
                        listaCarreras.add(carrera);
                        tlog.append(carrera.getIdcarrera() + " - " + carrera.getDescripcion() + "\n");
                    }

                    String total = em.createNativeQuery("SELECT Count(*) from carrera").getSingleResult().toString();

                    int response = JOptionPane.showConfirmDialog(null, "<html>Acepta que se borren <b>todas</b>(" + total + ") las carreras y se agreguen <b>" + listaCarreras.size() + "</b> carreras desde SIIAU</html>", "Aceptar",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response == JOptionPane.YES_OPTION) {

                        em.getTransaction().begin();
                        em.createNativeQuery("DELETE FROM carrera").executeUpdate();
                        em.getTransaction().commit();

                        em.getTransaction().begin();
                        for (Object carrerao : listaCarreras) {
                            carrera = (Carrera) carrerao;
                            em.persist(carrera);
                        }
                        em.getTransaction().commit();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(SIIAUConnector.class.getName()).log(Level.SEVERE, null, ex);
                }
                tlog.append("Sincronizacion de carreras terminada.\n");
            }
        };
        SwingUtilities.invokeLater(hilo);

    }//GEN-LAST:event_jButtonCarrerasActionPerformed

    private void jButtonMaestrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMaestrosActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Runnable hilo = new Runnable() {
            @Override
            public void run() {
                try {
                    Document listaHorarios = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/sspsecc.consulta_oferta")
                            .data("ciclop", "201420", "cup", "J", "deptop", "" + getCodigoDeDepartamento() + "", "ordenp", "0", "mostrarp", "1000", "tipop", "T", "secp", "A", "regp", "T")
                            .userAgent("Mozilla")
                            .cookie(getFecha() + "SIIAUSESION", sessionId)
                            .cookie(getFecha() + "SIIAUUDG", sessionId2)
                            .timeout(0)
                            .post();

                    Elements maestrosTR = listaHorarios.select("body > table > tbody > tr").select("td:eq(10)");
                    List listaProfesores = new ArrayList();
                    Profesor profesor;
                    for (Element maestro : maestrosTR) {
                        Elements tablaMaestros = maestro.select("table > tbody > tr");
                        for (Element trMaestro : tablaMaestros) {
                            profesor = new Profesor();
                            profesor.setIdprofesor(Integer.parseInt(trMaestro.select("td:eq(1)").text()));
                            String[] splitName = trMaestro.select("td:eq(2)").text().split("-")[0].split(",");
                            profesor.setNombres(splitName[1].trim());
                            profesor.setApellidos(splitName[0].trim());
                            if (listaProfesores.contains(profesor)) {
                                continue;
                            }

                            listaProfesores.add(profesor);

                            tlog.append(profesor.getIdprofesor() + " - " + profesor.getNombres() + " " + profesor.getApellidos() + "\n");
                        }
                    }
                    String total = em.createNativeQuery("SELECT Count(*) from profesor").getSingleResult().toString();

                    int response = JOptionPane.showConfirmDialog(null, "<html>Acepta que se borren <b>todos</b>(" + total + ") los profesores y se agreguen <b>" + listaProfesores.size() + "</b> profesores desde SIIAU</html>", "Aceptar",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response == JOptionPane.YES_OPTION) {

                        em.getTransaction().begin();
                        em.createNativeQuery("DELETE FROM profesor").executeUpdate();
                        em.getTransaction().commit();

                        em.getTransaction().begin();
                        for (Object profesoro : listaProfesores) {
                            profesor = (Profesor) profesoro;
                            em.persist(profesor);
                        }
                        em.getTransaction().commit();
                    }
                    tlog.append("Sincronizacion de profesores terminada.");
                } catch (IOException ex) {
                    Logger.getLogger(SIIAUConnector.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        SwingUtilities.invokeLater(hilo);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButtonMaestrosActionPerformed

    private void jButtonMateriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMateriasActionPerformed
        Runnable hilo = new Runnable() {
            @Override
            public void run() {
                try {
                    List listaMaterias = new ArrayList();
                    Document listaHorarios = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/sspsecc.consulta_oferta")
                            .data("ciclop", "201420", "cup", "J", "deptop", "" + getCodigoDeDepartamento() + "", "ordenp", "0", "mostrarp", "1000", "tipop", "T", "secp", "A", "regp", "T")
                            .userAgent("Mozilla")
                            .cookie(getFecha() + "SIIAUSESION", sessionId)
                            .cookie(getFecha() + "SIIAUUDG", sessionId2)
                            .timeout(0)
                            .post();

                    Elements materiasTDs = listaHorarios.select("body > table > tbody > tr");
                    HashSet links = new HashSet();
                    for (Element element : materiasTDs) {
                        if (null == element.select("td:eq(3)").first()) {
                            continue;
                        }
                        Element link = element.select("td:eq(3) a").first();
                        links.add(link);
                    }

                    Materia materia;
                    for (Object object : links) {
                        Element link = (Element) object;
                        Document paginaDeLaMateria = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/" + link.attr("href"))
                                .userAgent("Mozilla")
                                .cookie(getFecha() + "SIIAUSESION", sessionId)
                                .cookie(getFecha() + "SIIAUUDG", sessionId2)
                                .timeout(0)
                                .post();
                        materia = new Materia();
                        materia.setNombre(paginaDeLaMateria.select("th").first().text());
                        materia.setArea(paginaDeLaMateria.select("td:eq(1)").first().text());
                        materia.setIdmateria(paginaDeLaMateria.select("td:eq(3)").first().text());
                        materia.setCreditos(Integer.parseInt(paginaDeLaMateria.select("td:eq(5)").first().text()));
                        materia.setTeoria(Integer.parseInt(paginaDeLaMateria.select("td:eq(7)").first().text()));
                        materia.setPractica(Integer.parseInt(paginaDeLaMateria.select("td:eq(9)").first().text()));

                        Element segundaFilaDeLaTabla = paginaDeLaMateria.select("tr:eq(2)").first();

                        materia.setTipo(segundaFilaDeLaTabla.select("td:eq(1)").first().text());
                        materia.setNivel(segundaFilaDeLaTabla.select("td:eq(3)").first().text());
                        materia.setExtraordinario(segundaFilaDeLaTabla.select("td:eq(5)").first().text());

                        if (listaMaterias.contains(materia)) {
                            continue;
                        }
                        listaMaterias.add(materia);
                    }
                    String totalMateriasEnBaseDeDatos = em.createNativeQuery("SELECT COUNT(*) from materia").getSingleResult().toString();

                    int response = JOptionPane.showConfirmDialog(null, "<html>Acepta que se borren <b>todas</b>(" + totalMateriasEnBaseDeDatos + ") las materias y se agreguen <b>" + listaMaterias.size() + "</b> materias desde SIIAU</html>", "Aceptar",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response == JOptionPane.YES_OPTION) {
                        em.getTransaction().begin();
                        em.createNativeQuery("DELETE FROM materia").executeUpdate();
                        em.getTransaction().commit();

                        em.getTransaction().begin();
                        for (Object materiao : listaMaterias) {
                            materia = (Materia) materiao;
                            em.persist(materia);
                        }
                        em.getTransaction().commit();

                    } else {
                    }
                } catch (IOException ex) {
                    Logger.getLogger(SIIAUConnector.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        SwingUtilities.invokeLater(hilo);
    }//GEN-LAST:event_jButtonMateriasActionPerformed

    private void jButtonCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCursosActionPerformed
        Runnable hilo = new Runnable() {
            @Override
            public void run() {
                try {
                    Document listaHorariosPage = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/sspsecc.consulta_oferta")
                            .data("ciclop", "201420", "cup", "J", "deptop", "" + getCodigoDeDepartamento() + "", "ordenp", "0", "mostrarp", "1000", "tipop", "T", "secp", "A", "regp", "T")
                            .userAgent("Mozilla")
                            .cookie(getFecha() + "SIIAUSESION", sessionId)
                            .cookie(getFecha() + "SIIAUUDG", sessionId2)
                            .timeout(0)
                            .post();
                    String totalCursosEnBaseDeDatos = em.createNativeQuery("SELECT COUNT(*) from curso").getSingleResult().toString();
                    Elements cursosTR = listaHorariosPage.select("body > table > tbody > tr");

                    //Removes the first two and last two TRs because they are the headers and footers of the table.
                    cursosTR.remove(cursosTR.size() - 1);
                    cursosTR.remove(cursosTR.size() - 1);
                    cursosTR.remove(0);
                    cursosTR.remove(0);

                    int response = JOptionPane.showConfirmDialog(null, "<html>Acepta que se borren <b>todos</b>(" + totalCursosEnBaseDeDatos + ") los cursos y se agreguen <b>" + cursosTR.size() + "</b> cursos desde SIIAU</html>", "Aceptar",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response == JOptionPane.YES_OPTION) {
                        em.getTransaction().begin();
                        em.createNativeQuery("DELETE FROM curso").executeUpdate();
                        em.createNativeQuery("DELETE FROM horario").executeUpdate();
                        em.getTransaction().commit();
                    } else {
                        return;
                    }

                    em.getTransaction().begin();
                    Curso curso;
                    for (Element cursoTR : cursosTR) {
                        curso = new Curso();
                        curso.setIdcurso(Integer.parseInt(cursoTR.select("td:eq(0)").first().text()));
                        curso.setDepartamento(cursoTR.select("td:eq(2)").first().text());
                        curso.setSec(cursoTR.select("td:eq(5)").first().text());
                        curso.setIdmateria(cursoTR.select("td:eq(3)").first().text());

                        Elements horariosTable = cursoTR.select("td:eq(9)");
                        Elements maestros = cursoTR.select("td:eq(10)");

                        for (Element maestro : maestros) {
                            Elements tablaMaestros = maestro.select("table > tbody > tr");
                            for (Element trMaestro : tablaMaestros) {
                                curso.setIdprofesor(Integer.parseInt(trMaestro.select("td:eq(1)").text()));
                                tlog.append("Maestro del curso: " + curso.getIdcurso() + " : " + curso.getIdprofesor() + " \n");
                            }
                        }

                        Horario horario;
                        for (Element horarioTR : horariosTable) {
                            Elements tablaHorarios = horarioTR.select("table > tbody > tr");
                            for (Element trHorario : tablaHorarios) {
                                horario = new Horario();
                                Element tHora = trHorario.select("td:eq(1)").first();
                                Element tDias = trHorario.select("td:eq(2)").first();
                                Element tPeriodo = trHorario.select("td:eq(5)").first();
                                String[] split = tHora.ownText().split("-");
                                String[] split2 = tDias.ownText().split(" ");
                                String[] split3 = tPeriodo.ownText().split("-");

                                Element tEdif = trHorario.select("td:eq(3)").first();
                                Element tAula = trHorario.select("td:eq(4)").first();

                                horario.setHoraEntrada(Integer.parseInt(split[0]));
                                horario.setHoraSalida(Integer.parseInt(split[1]));

                                String[] fechaInicioBits = split3[0].split("/");
                                String[] fechaFinBits = split3[0].split("/");

                                Calendar calFechaInicio = Calendar.getInstance();
                                calFechaInicio.set(Calendar.YEAR, Integer.parseInt(fechaInicioBits[2].trim()));
                                calFechaInicio.set(Calendar.MONTH, Integer.parseInt(fechaInicioBits[1]));
                                calFechaInicio.set(Calendar.DAY_OF_MONTH, Integer.parseInt(fechaInicioBits[0]));

                                Calendar calFechaFin = Calendar.getInstance();
                                calFechaFin.set(Calendar.YEAR, Integer.parseInt(fechaFinBits[2].trim()));
                                calFechaFin.set(Calendar.MONTH, Integer.parseInt(fechaFinBits[1]));
                                calFechaFin.set(Calendar.DAY_OF_MONTH, Integer.parseInt(fechaFinBits[0]));

                                horario.setFechaInicio(calFechaInicio.getTime());
                                horario.setFechaFin(calFechaFin.getTime());
                                horario.setEdif(tEdif.ownText());
                                horario.setAula(tAula.ownText());

                                if (!split2[0].equals(".")) {
                                    horario.setLun(true);
                                }
                                if (!split2[1].equals(".")) {
                                    horario.setMar(true);
                                }
                                if (!split2[2].equals(".")) {
                                    horario.setMie(true);
                                }
                                if (!split2[3].equals(".")) {
                                    horario.setJue(true);
                                }
                                if (!split2[4].equals(".")) {
                                    horario.setVie(true);
                                }
                                if (!split2[5].equals(".")) {
                                    horario.setSab(true);
                                }
                                horario.setIdcurso(curso.getIdcurso());
                                em.persist(horario);
                            }
                        }

                        String idCarrera = "";
                        Element NRClink = cursoTR.select("td:eq(0) a").first();
                        Document paginaCurso = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/" + NRClink.attr("href"))
                                .userAgent("Mozilla")
                                .cookie(getFecha() + "SIIAUSESION", sessionId)
                                .cookie(getFecha() + "SIIAUUDG", sessionId2)
                                .timeout(0)
                                .post();
                        System.out.println("http://siiauescolar.siiau.udg.mx/wse/" + NRClink.attr("href"));
                        Element tabla = paginaCurso.select("body > table > tbody > tr:last-child").first();
                        Element lastRow = tabla.select("table > tbody > tr:last-child").first();

                        if (null == lastRow) {
                            tlog.append("Curso: " + NRClink.text() + " Sin Alumnos\n");
                            tlog.update(tlog.getGraphics());
                            continue;
                        } else { // THERE ARE SOME COURSES WITHOUT ALUMNI
                            tlog.append("Buscando id de carrera del curso\n");
                            tlog.update(tlog.getGraphics());
                            curso.setIdcarrera(lastRow.select("td:eq(3)").text());
                        }
                        em.persist(curso);
                    }
                    em.getTransaction().commit();
                } catch (IOException ex) {
                    Logger.getLogger(SIIAUConnector.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        SwingUtilities.invokeLater(hilo);
    }//GEN-LAST:event_jButtonCursosActionPerformed

    private void jButtonLoginSIIAUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginSIIAUActionPerformed
        try {
            if (jButtonLoginSIIAU.getText().equals("Desconectar")) {
                jButtonLoginSIIAU.setText("Conectar");
                jPanel3.setEnabled(true);
                jTextFieldCodigo.setEnabled(true);
                jPasswordFieldNIP.setEnabled(true);
                jLabel1.setEnabled(true);
                jLabel2.setEnabled(true);
                sessionId = "";
                sessionId2 = "";
                jButtonSincronizaProfesor.setEnabled(false);
                jTextFieldProfesorId.setEnabled(false);
                return;
            }

            org.jsoup.Connection.Response respuesta = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wus/gupprincipal.valida_inicio")
                    .data("p_codigo_c", jTextFieldCodigo.getText(), "p_clave_c", jPasswordFieldNIP.getText())
                    .method(org.jsoup.Connection.Method.POST)
                    .timeout(0)
                    .execute();

            Document login = respuesta.parse();
            sessionId = respuesta.cookie(getFecha() + "SIIAUSESION");
            sessionId2 = respuesta.cookie(getFecha() + "SIIAUUDG");
            if(sessionId == null){
                JOptionPane.showMessageDialog(rootPane, "Cheque que la fecha de su Sistema Operativo sea la correcta.");
                return;
            }
            if (login.toString().contains("no son validos")) {
                JOptionPane.showMessageDialog(rootPane, "Datos de acceso incorrecto.");
            } else {
                jPanel3.setEnabled(false);
                jTextFieldCodigo.setEnabled(false);
                jPasswordFieldNIP.setEnabled(false);
                jLabel1.setEnabled(false);
                jLabel2.setEnabled(false);
                jButtonLoginSIIAU.setText("Desconectar");
                jButtonSincronizaProfesor.setEnabled(false);
                jTextFieldProfesorId.setEnabled(false);

                Document formaDeConsultaAcademica = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/sspsecc.lista_deptos?cup=J")
                        .userAgent("Mozilla")
                        .cookie(getFecha() + "SIIAUSESION", sessionId)
                        .cookie(getFecha() + "SIIAUUDG", sessionId2)
                        .timeout(0)
                        .post();

                Element firstTable = formaDeConsultaAcademica.select("body > table").first();
                Elements departamentosTRS = firstTable.select("tbody > tr");
                for (Element departamentoHR : departamentosTRS.subList(1, departamentosTRS.size())) {
                    departamentos.put(departamentoHR.select("td:eq(1)").first().text(), departamentoHR.select("td:eq(0)").first().text());
                    jComboBoxDepartamento.addItem(departamentoHR.select("td:eq(1)").first().text());
                }
                jComboBoxDepartamento.setEnabled(true);
                jButtonCarreras.setEnabled(true);
                jButtonCursos.setEnabled(true);
                jButtonMaestros.setEnabled(true);
                jButtonMaterias.setEnabled(true);
                jButtonSincronizaProfesor.setEnabled(true);
                jTextFieldProfesorId.setEnabled(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(SIIAUConnector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonLoginSIIAUActionPerformed

    private void jButtonSincronizaProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSincronizaProfesorActionPerformed
        try {
            int idProfesor=-1;
            Document listaHorarios = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/sspsecc.consulta_oferta")
                    .data("ciclop", "201420", "cup", "J", "deptop", "", "ordenp", "0", "mostrarp", "1000", "tipop", "T", "secp", "A", "regp", "T", "codprofp", jTextFieldProfesorId.getText())
                    .userAgent("Mozilla")
                    .cookie(getFecha() + "SIIAUSESION", sessionId)
                    .cookie(getFecha() + "SIIAUUDG", sessionId2)
                    .timeout(0)
                    .post();

            Elements maestrosTR = listaHorarios.select("body > table > tbody > tr").select("td:eq(10)");
            Profesor profesor;
            for (Element maestro : maestrosTR) {
                Elements tablaMaestros = maestro.select("table > tbody > tr");
                for (Element trMaestro : tablaMaestros) {
                    idProfesor = Integer.parseInt(trMaestro.select("td:eq(1)").text());
                    if (em.find(Profesor.class, idProfesor) != null) {
                        tlog.append("El profesor con ese codigo ya existe en la base de datos\n");
                        tlog.update(tlog.getGraphics());
                    } else {
                        tlog.append("Agregando los datos del profesor a la base de datos\n");
                        tlog.update(tlog.getGraphics());
                        em.getTransaction().begin();
                        profesor = new Profesor();
                        profesor.setIdprofesor(idProfesor);
                        String[] splitName = trMaestro.select("td:eq(2)").text().split("-")[0].split(",");
                        profesor.setNombres(splitName[1].trim());
                        profesor.setApellidos(splitName[0].trim());
                        em.persist(profesor);
                        em.getTransaction().commit();
                    }

                }
            }

            Elements materiasTDs = listaHorarios.select("body > table > tbody > tr");
            HashSet links = new HashSet();
            for (Element element : materiasTDs) {
                if (null == element.select("td:eq(3)").first()) {
                    continue;
                }
                Element link = element.select("td:eq(3) a").first();
                links.add(link);
            }

            Materia materia;
            for (Object object : links) {
                Element link = (Element) object;
                Document paginaDeLaMateria = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/" + link.attr("href"))
                        .userAgent("Mozilla")
                        .cookie(getFecha() + "SIIAUSESION", sessionId)
                        .cookie(getFecha() + "SIIAUUDG", sessionId2)
                        .timeout(0)
                        .post();
                materia = new Materia();
                materia.setNombre(paginaDeLaMateria.select("th").first().text());
                materia.setArea(paginaDeLaMateria.select("td:eq(1)").first().text());
                materia.setIdmateria(paginaDeLaMateria.select("td:eq(3)").first().text());
                materia.setCreditos(Integer.parseInt(paginaDeLaMateria.select("td:eq(5)").first().text()));
                materia.setTeoria(Integer.parseInt(paginaDeLaMateria.select("td:eq(7)").first().text()));
                materia.setPractica(Integer.parseInt(paginaDeLaMateria.select("td:eq(9)").first().text()));

                Element segundaFilaDeLaTabla = paginaDeLaMateria.select("tr:eq(2)").first();

                materia.setTipo(segundaFilaDeLaTabla.select("td:eq(1)").first().text());
                materia.setNivel(segundaFilaDeLaTabla.select("td:eq(3)").first().text());
                materia.setExtraordinario(segundaFilaDeLaTabla.select("td:eq(5)").first().text());

                if (em.find(Materia.class, materia.getIdmateria()) != null) {
                    tlog.append("Materia con ese codigo ya existe en la base de datos\n");
                    tlog.update(tlog.getGraphics());
                } else {
                    tlog.append("Agregando materia a base de datos\n");
                    tlog.update(tlog.getGraphics());
                    em.getTransaction().begin();
                    em.persist(materia);
                    em.getTransaction().commit();
                }
            }
            Elements cursosTR = listaHorarios.select("body > table > tbody > tr");
            cursosTR.remove(cursosTR.size() - 1);
            cursosTR.remove(cursosTR.size() - 1);
            cursosTR.remove(0);
            cursosTR.remove(0);
            em.getTransaction().begin();
            em.createNativeQuery("DELETE FROM curso WHERE idprofesor = "+idProfesor+"").executeUpdate();
            em.getTransaction().commit();
            Curso curso;
            for (Element cursoTR : cursosTR) {
                em.getTransaction().begin();
                em.createNativeQuery("DELETE FROM horario WHERE idcurso = "+Integer.parseInt(cursoTR.select("td:eq(0)").first().text())+"").executeUpdate();
                em.getTransaction().commit();
                curso = new Curso();
                curso.setIdcurso(Integer.parseInt(cursoTR.select("td:eq(0)").first().text()));
                curso.setDepartamento(cursoTR.select("td:eq(2)").first().text());
                curso.setSec(cursoTR.select("td:eq(5)").first().text());
                curso.setIdmateria(cursoTR.select("td:eq(3)").first().text());

                Elements horariosTable = cursoTR.select("td:eq(9)");
                Elements maestros = cursoTR.select("td:eq(10)");

                for (Element maestro : maestros) {
                    Elements tablaMaestros = maestro.select("table > tbody > tr");
                    for (Element trMaestro : tablaMaestros) {
                        curso.setIdprofesor(Integer.parseInt(trMaestro.select("td:eq(1)").text()));
                        tlog.append("Maestro del curso: " + curso.getIdcurso() + " : " + curso.getIdprofesor() + " \n");
                    }
                }

                Horario horario;
                em.getTransaction().begin();
                for (Element horarioTR : horariosTable) {
                    Elements tablaHorarios = horarioTR.select("table > tbody > tr");
                    for (Element trHorario : tablaHorarios) {
                        horario = new Horario();
                        Element tHora = trHorario.select("td:eq(1)").first();
                        Element tDias = trHorario.select("td:eq(2)").first();
                        Element tPeriodo = trHorario.select("td:eq(5)").first();
                        String[] split = tHora.ownText().split("-");
                        String[] split2 = tDias.ownText().split(" ");
                        String[] split3 = tPeriodo.ownText().split("-");

                        Element tEdif = trHorario.select("td:eq(3)").first();
                        Element tAula = trHorario.select("td:eq(4)").first();

                        horario.setHoraEntrada(Integer.parseInt(split[0]));
                        horario.setHoraSalida(Integer.parseInt(split[1]));

                        String[] fechaInicioBits = split3[0].split("/");
                        String[] fechaFinBits = split3[0].split("/");

                        Calendar calFechaInicio = Calendar.getInstance();
                        calFechaInicio.set(Calendar.YEAR, Integer.parseInt(fechaInicioBits[2].trim()));
                        calFechaInicio.set(Calendar.MONTH, Integer.parseInt(fechaInicioBits[1]));
                        calFechaInicio.set(Calendar.DAY_OF_MONTH, Integer.parseInt(fechaInicioBits[0]));

                        Calendar calFechaFin = Calendar.getInstance();
                        calFechaFin.set(Calendar.YEAR, Integer.parseInt(fechaFinBits[2].trim()));
                        calFechaFin.set(Calendar.MONTH, Integer.parseInt(fechaFinBits[1]));
                        calFechaFin.set(Calendar.DAY_OF_MONTH, Integer.parseInt(fechaFinBits[0]));

                        horario.setFechaInicio(calFechaInicio.getTime());
                        horario.setFechaFin(calFechaFin.getTime());
                        horario.setEdif(tEdif.ownText());
                        horario.setAula(tAula.ownText());

                        if (!split2[0].equals(".")) {
                            horario.setLun(true);
                        }
                        if (!split2[1].equals(".")) {
                            horario.setMar(true);
                        }
                        if (!split2[2].equals(".")) {
                            horario.setMie(true);
                        }
                        if (!split2[3].equals(".")) {
                            horario.setJue(true);
                        }
                        if (!split2[4].equals(".")) {
                            horario.setVie(true);
                        }
                        if (!split2[5].equals(".")) {
                            horario.setSab(true);
                        }
                        horario.setIdcurso(curso.getIdcurso());
                        
                        em.persist(horario);
                    }
                }
                em.getTransaction().commit();

                Element NRClink = cursoTR.select("td:eq(0) a").first();
                Document paginaCurso = Jsoup.connect("http://siiauescolar.siiau.udg.mx/wse/" + NRClink.attr("href"))
                        .userAgent("Mozilla")
                        .cookie(getFecha() + "SIIAUSESION", sessionId)
                        .cookie(getFecha() + "SIIAUUDG", sessionId2)
                        .timeout(0)
                        .post();
                System.out.println("http://siiauescolar.siiau.udg.mx/wse/" + NRClink.attr("href"));
                Element tabla = paginaCurso.select("body > table > tbody > tr:last-child").first();
                Element lastRow = tabla.select("table > tbody > tr:last-child").first();

                if (null == lastRow) {
                    tlog.append("Curso: " + NRClink.text() + " Sin Alumnos\n");
                    tlog.update(tlog.getGraphics());
                    continue;
                } else { // THERE ARE SOME COURSES WITHOUT ALUMNI
                    tlog.append("Buscando id de carrera del curso\n");
                    tlog.update(tlog.getGraphics());
                    curso.setIdcarrera(lastRow.select("td:eq(3)").text());
                }
                em.getTransaction().begin();
                em.persist(curso);
                em.getTransaction().commit();
            }

        } catch (IOException ex) {
            Logger.getLogger(SIIAUConnector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSincronizaProfesorActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(papa==null) {
        } else {
            papa.setAlwaysOnTop(true);
            papa.show();
        }
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SIIAUConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SIIAUConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SIIAUConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SIIAUConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SIIAUConnector().setVisible(true);
            }
        });
    }

    public static String getFecha() {
        String fecha;

        Calendar cal = Calendar.getInstance();
        int dayI = cal.get(Calendar.DAY_OF_MONTH);
        int monthI = cal.get(Calendar.MONTH) + 1;

        String day;
        if (dayI < 10) {
            day = "0" + String.valueOf(dayI);
        } else {
            day = String.valueOf(dayI);
        }

        String month;
        if (monthI < 10) {
            month = "0" + String.valueOf(monthI);
        } else {
            month = String.valueOf(monthI);
        }
        String year = String.valueOf(cal.get(Calendar.YEAR));

        fecha = "" + day + "" + month + "" + year;
        return fecha;
    }

    public String getCodigoDeDepartamento() {
        return departamentos.get(jComboBoxDepartamento.getSelectedItem().toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCarreras;
    private javax.swing.JButton jButtonCursos;
    private javax.swing.JButton jButtonLoginSIIAU;
    private javax.swing.JButton jButtonMaestros;
    private javax.swing.JButton jButtonMaterias;
    private javax.swing.JButton jButtonSincronizaProfesor;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBoxDepartamento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordFieldNIP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCodigo;
    private javax.swing.JTextField jTextFieldProfesorId;
    private javax.swing.JTextArea tlog;
    // End of variables declaration//GEN-END:variables
}
