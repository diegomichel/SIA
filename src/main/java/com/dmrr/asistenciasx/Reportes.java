/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dmrr.asistenciasx;

import bareMysqlTables.Registro;
import java.awt.Color;
import java.awt.Desktop;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import org.codehaus.plexus.util.FileUtils;
import org.eclipse.persistence.config.QueryHints;
import org.eclipse.persistence.config.ResultType;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.joda.time.DateTime;

/**
 *
 * @author diego
 */
public class Reportes extends javax.swing.JFrame {

    /**
     * Creates new form Reportes
     */
    TableRowSorter sorterAsistencias, sorterFaltas;
    List listaDeshacer;

    public Reportes() {
        initComponents();
        listaDeshacer = new ArrayList();
        jDateChooser.setLocale(new Locale("es", "ES"));
        jDateChooser.setDateFormatString("M-dd-yyyy");
        jDateChooser.setDate(new Date());
    }
    Main parent;
    Reportes(Main aThis) {
        this();
        parent = aThis;
    }

    private void miFiltroAsistencias() {
        RowFilter rf = null;
        try {
            rf = RowFilter.regexFilter(jTextFieldFilterText.getText().toUpperCase(), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorterAsistencias.setRowFilter(rf);
    }

    private void miFiltroFaltas() {
        RowFilter rf = null;
        try {
            rf = RowFilter.regexFilter(jTextFieldFilterText.getText().toUpperCase(), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorterFaltas.setRowFilter(rf);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAsistencias = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonRemoverFalta = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFaltas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBoxRango = new javax.swing.JComboBox();
        jTextFieldFilterText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabelDia = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserPropertyChange(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Asistencias", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jTableAsistencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableAsistencias);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Faltas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jButtonRemoverFalta.setText("Remover Falta");
        jButtonRemoverFalta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoverFaltaActionPerformed(evt);
            }
        });

        jTableFaltas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableFaltas);

        jButton1.setText("Deshacer Ultimo Cambio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButtonRemoverFalta))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRemoverFalta)
                    .addComponent(jButton1)))
        );

        jButton3.setText("Generar reportes del");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBoxRango.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dia", "Semana", "Mes" }));

        jTextFieldFilterText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFilterTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Filtro");

        jLabelDia.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelDia.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelDia.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxRango, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFilterText, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelDia, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldFilterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabelDia)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jComboBoxRango, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserPropertyChange
        if (evt.getPropertyName().equals("date")) {
            jTextFieldFilterText.setText("");
            loadTables(jDateChooser.getDate());
        }
    }//GEN-LAST:event_jDateChooserPropertyChange

    private void jButtonRemoverFaltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoverFaltaActionPerformed
        int row = jTableFaltas.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(rootPane, "Seleccione una fila de la tabla de faltas");
            return;
        }
        String hora = (String) jTableFaltas.getValueAt(jTableFaltas.getSelectedRow(), 5);

        Integer idhorario = (Integer) jTableFaltas.getValueAt(jTableFaltas.getSelectedRow(), 0);

        System.out.println(idhorario);
        if (hora.length() == 3) {
            hora = hora.substring(0, 1);
        }
        if (hora.length() == 4) {
            hora = hora.substring(0, 2);
        }

        em.getTransaction().begin();

        Registro registro = new Registro();
        registro.setIdhorario(idhorario);

        Calendar cal = dateTime.toCalendar(Locale.ENGLISH);
        cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(hora));
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);

        registro.setFechayhora(cal.getTime());

        em.persist(registro);
        em.getTransaction().commit();
        listaDeshacer.add(registro.getIdregistro());
        loadTables(jDateChooser.getDate());

        miFiltroAsistencias();
        miFiltroFaltas();
    }//GEN-LAST:event_jButtonRemoverFaltaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (listaDeshacer.isEmpty()) {
            return;
        }
        Integer removeThis = (Integer) listaDeshacer.remove(listaDeshacer.size() - 1);
        Registro registro = em.find(Registro.class, removeThis);

        em.getTransaction().begin();
        em.remove(registro);
        em.getTransaction().commit();

        loadTables(jDateChooser.getDate());
    }//GEN-LAST:event_jButton1ActionPerformed
    JasperReport reporte;
    JasperPrint reporte_view;
    ByteArrayOutputStream baos;
    InputStream input;
    TableModel tableModelForJR;
    JRTableModelDataSource jrTableModelDS;
    Map parameters;

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        File theDir = new File("reportes");
        theDir.mkdir();
        try {
            FileUtils.cleanDirectory(theDir);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Cierre los reportes abiertos primero.");
        }

        if (jComboBoxRango.getSelectedIndex() == 0) {
            generaReportesPDF();
        } else if (jComboBoxRango.getSelectedIndex() == 1) {
            c = Calendar.getInstance();
            c.setTime(dateTime.toDate());
            int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);
            if (dayOfWeek == 1) {
                dayOfWeek = 7;
            }
            dateTime = dateTime.minusDays(dayOfWeek - 2);
            for (int i = 0; i < 6; i++) {
                jDateChooser.setDate(dateTime.toDate());
                generaReportesPDF();
                dateTime = dateTime.plusDays(1);
            }

        } else if (jComboBoxRango.getSelectedIndex() == 2) {
            int month = dateTime.getMonthOfYear();
            int dayOfMonth = dateTime.getDayOfMonth() - 1;
            dateTime = dateTime.minusDays(dayOfMonth);
            for (int i = 0; i <= 31; i++) {
                if (dateTime.getMonthOfYear() != month) {
                    break;
                }
                c.setTime(dateTime.toDate());
                if (c.get(Calendar.DAY_OF_WEEK) == 1) {
                    dateTime = dateTime.plusDays(1);
                    continue;
                }
                jDateChooser.setDate(dateTime.toDate());
                generaReportesPDF();
                dateTime = dateTime.plusDays(1);
            }
        }
        try {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(theDir);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextFieldFilterTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFilterTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFilterTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reportes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonRemoverFalta;
    private javax.swing.JComboBox jComboBoxRango;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDia;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAsistencias;
    private javax.swing.JTable jTableFaltas;
    private javax.swing.JTextField jTextFieldFilterText;
    // End of variables declaration//GEN-END:variables

    DateTime dateTime;
    BindingGroup bindingGroup;
    EntityManager em;
    Query registrosQuery;
    private List<Map> listaDeRegistros;
    Calendar c;
    DefaultTableModel model;

    private void loadTables(Date date) {
        dateTime = new DateTime(date);

        jTableAsistencias.setModel(new DefaultTableModel());
        jTableFaltas.setModel(new DefaultTableModel());

        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        try {
            em = javax.persistence.Persistence.createEntityManagerFactory("asistenciasx?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Cheque la conexion a la base de datos.");
        }
        registrosQuery
                = em.createNativeQuery("SELECT * FROM asistenciasx.registrodeasistencias "
                        + "WHERE fechayhora BETWEEN '" + dateTime.getYear() + "-" + dateTime.getMonthOfYear() + "-" + dateTime.getDayOfMonth() + " 00:00:00' AND '" + dateTime.getYear() + "-" + dateTime.getMonthOfYear() + "-" + dateTime.getDayOfMonth() + " 23:59:59'"
                        + " ORDER by fechayhora asc");
        registrosQuery.setHint(QueryHints.RESULT_TYPE, ResultType.Map);
        listaDeRegistros = registrosQuery.getResultList();

        for (Map row : listaDeRegistros) {
            row.replace("fechayhora", row.get("fechayhora").toString().substring(0, 19));
        }
        JTableBinding jTableBinding;
        JTableBinding.ColumnBinding columnBinding;
        if (!listaDeRegistros.isEmpty()) {

            jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ, listaDeRegistros, jTableAsistencias);
            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${nombres} ${apellidos}"));
            columnBinding.setColumnName("Profesor");
            columnBinding.setColumnClass(String.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${nombre}"));
            columnBinding.setColumnName("Materia");
            columnBinding.setColumnClass(String.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${edif} ${aula}"));
            columnBinding.setColumnName("Salon");
            columnBinding.setColumnClass(String.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${fechayhora}"));
            columnBinding.setColumnName("Fecha y Hora");
            columnBinding.setColumnClass(String.class);

            bindingGroup.addBinding(jTableBinding);
            bindingGroup.bind();

            jTableAsistencias.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTableAsistencias.getColumnModel().getColumn(2).setPreferredWidth(25);
        }

        /*
         Load faltas
         */
        c = Calendar.getInstance();
        c.setTime(dateTime.toDate());

        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK) - 1;
        String dayQuery = "";
        jLabelDia.setForeground(Color.BLACK);
        switch (dayOfWeek) {
            case 0:
                jLabelDia.setForeground(Color.RED);
                jLabelDia.setText("Domingo");
                return;
            case 1:
                dayQuery = " lun = 1 ";
                jLabelDia.setText("Lunes");
                break;
            case 2:
                dayQuery = " mar = 1 ";
                jLabelDia.setText("Martes");
                break;
            case 3:
                dayQuery = " mie = 1 ";
                jLabelDia.setText("Miercoles");
                break;
            case 4:
                dayQuery = " jue = 1 ";
                jLabelDia.setText("Jueves");
                break;
            case 5:
                dayQuery = " vie = 1 ";
                jLabelDia.setText("Viernes");
                break;
            case 6:
                dayQuery = " sab = 1 ";
                jLabelDia.setText("Sabado");
                break;
        }

        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        try {
            em = javax.persistence.Persistence.createEntityManagerFactory("asistenciasx?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Cheque la conexion a la base de datos.");
        }
        registrosQuery
                = em.createNativeQuery("SELECT h.idhorario as idhorario, p.idprofesor as Codigo, concat_ws(' ',p.nombres,p.apellidos) as Profesor, m.nombre as Materia, concat_ws(' ',h.edif,h.aula) as Aula, h.horaEntrada as Entrada "
                        + "FROM horario h, curso c, profesor p, materia m\n"
                        + "WHERE " + dayQuery + " \n"
                        + "AND h.idcurso = c.idcurso\n"
                        + "AND c.idprofesor = p.idprofesor\n"
                        + "AND m.idmateria = c.idmateria\n"
                        + "AND h.idhorario NOT IN (SELECT idhorario FROM registrodeasistencias WHERE fechayhora BETWEEN '" + dateTime.getYear() + "-" + dateTime.getMonthOfYear() + "-" + dateTime.getDayOfMonth() + " 00:00:00' AND '" + dateTime.getYear() + "-" + dateTime.getMonthOfYear() + "-" + dateTime.getDayOfMonth() + " 23:59:59')\n"
                        + "ORDER by h.horaEntrada asc;");

        registrosQuery.setHint(QueryHints.RESULT_TYPE, ResultType.Map);
        listaDeRegistros = registrosQuery.getResultList();

        if (!listaDeRegistros.isEmpty()) {
            jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ, listaDeRegistros, jTableFaltas);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${idhorario}"));
            columnBinding.setColumnName("ID");
            columnBinding.setColumnClass(Integer.class);
            
            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${Codigo}"));
            columnBinding.setColumnName("Codigo");
            columnBinding.setColumnClass(Integer.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${Profesor}"));
            columnBinding.setColumnName("Profesor");
            columnBinding.setColumnClass(String.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${Materia}"));
            columnBinding.setColumnName("Materia");
            columnBinding.setColumnClass(String.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${Aula}"));
            columnBinding.setColumnName("Aula");
            columnBinding.setColumnClass(String.class);

            columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${Entrada}"));
            columnBinding.setColumnName("Entrada");
            columnBinding.setColumnClass(String.class);

            bindingGroup.addBinding(jTableBinding);
            bindingGroup.bind();

            jTableFaltas.getColumnModel().getColumn(0).setMaxWidth(6);
            jTableFaltas.getColumnModel().getColumn(0).setMinWidth(6);
            jTableFaltas.getColumnModel().getColumn(1).setPreferredWidth(15);
            jTableFaltas.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTableFaltas.getColumnModel().getColumn(3).setPreferredWidth(150);

        }
        generateFiltersAndSorters();
        
        TitledBorder border;
        border = (TitledBorder) jPanel1.getBorder();
        border.setTitle("Asistencias: "+jTableAsistencias.getRowCount());
        jPanel1.setBorder(border);
        
        border = (TitledBorder) jPanel2.getBorder();
        border.setTitle("Faltas: "+jTableFaltas.getRowCount());
        jPanel2.setBorder(border);
    }

    private void generateFiltersAndSorters() {
        sorterAsistencias = new TableRowSorter(jTableAsistencias.getModel());
        jTableAsistencias.setRowSorter(sorterAsistencias);

        sorterFaltas = new TableRowSorter(jTableFaltas.getModel());
        jTableFaltas.setRowSorter(sorterFaltas);

        jTextFieldFilterText.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        miFiltroAsistencias();
                        miFiltroFaltas();
                    }

                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        miFiltroAsistencias();
                        miFiltroFaltas();
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        miFiltroAsistencias();
                        miFiltroFaltas();
                    }
                });
    }

    private void generaReportesPDF() {
        parameters = new HashMap();
        parameters.put("dia", dateTime.getDayOfMonth() + "-" + dateTime.getMonthOfYear() + "-" + dateTime.getYear());

        if (jTableAsistencias.getRowCount() > 0) {
            try {
                input = getClass().getResource("/ReporteFe.jrxml").openStream();
                baos = new ByteArrayOutputStream();
                JasperCompileManager.compileReportToStream(input, baos);
                reporte = (JasperReport) JRLoader.loadObject(new ByteArrayInputStream(baos.toByteArray()));
                tableModelForJR = (TableModel) jTableAsistencias.getModel();
                jrTableModelDS = new JRTableModelDataSource(tableModelForJR);
                reporte_view = JasperFillManager.fillReport(reporte, parameters, jrTableModelDS);
                JasperExportManager.exportReportToPdfFile(reporte_view, "reportes/asist-" + new SimpleDateFormat("MMM").format(c.getTime()) + dateTime.getDayOfMonth() + "-" + dateTime.getYear() + ".pdf");
            } catch (IOException | JRException ex) {
                Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jTableFaltas.getRowCount() > 0) {
            try {
                input = getClass().getResource("/ReporteFa.jrxml").openStream();
                baos = new ByteArrayOutputStream();
                JasperCompileManager.compileReportToStream(input, baos);
                reporte = (JasperReport) JRLoader.loadObject(new ByteArrayInputStream(baos.toByteArray()));
                tableModelForJR = (TableModel) jTableFaltas.getModel();
                jrTableModelDS = new JRTableModelDataSource(tableModelForJR);
                reporte_view = JasperFillManager.fillReport(reporte, parameters, jrTableModelDS);
                JasperExportManager.exportReportToPdfFile(reporte_view, "reportes/faltas-" + new SimpleDateFormat("MMM").format(c.getTime()) + dateTime.getDayOfMonth() + "-" + dateTime.getYear() + ".pdf");
            } catch (IOException | JRException ex) {
                Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
